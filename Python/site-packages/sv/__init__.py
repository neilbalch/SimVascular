# Copyright (c) Stanford University, The Regents of the University of
#               California, and others.
#
# All Rights Reserved.
#
# See Copyright-SimVascular.txt for additional details.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import os
#import math
import ctypes
import sys

if sys.platform == "darwin":
    ext = "dylib"
elif sys.platform == "linux2":
    ext = "so"
elif sys.platform == "win32" or sys.platform =="cygwin":
    ext = "dll"
else:
    raise ValueError("System unrecognized")

if sys.version_info < (3,0):
    myDll=ctypes.PyDLL('lib_simvascular_solid.' + ext)
    myDll.initpySolid()
    import pySolid as Solid
    myDll=ctypes.PyDLL('lib_simvascular_polydata_solid.' + ext)
    myDll.initpySolidPolydata()
    import pySolidPolydata as SolidPolyData
    try:
        myDll=ctypes.PyDLL('lib_simvascular_parasolid_solid.' + ext)
        myDll.initpySolidParasolid()
        import pySolidParasolid as SolidParaSolid
    except:
        pass 
    myDll=ctypes.PyDLL('lib_simvascular_repository.' + ext)
    myDll.initpyRepository()
    import pyRepository as Repository
    myDll=ctypes.PyDLL('lib_simvascular_mesh.' + ext)
    myDll.initpyMeshObject()
    import pyMeshObject as MeshObject
    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_mesh.' + ext)
        myDll.initpyMeshTetgen()
        import pyMeshTetgen as MeshTetGen
    except:
        print("TetGen is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_mesh.' + ext)
        myDll.initpyMeshSim()
        import pyMeshSim as MeshSim
    except Exception as e:
        pass 
    myDLL=ctypes.PyDLL('lib_simvascular_utils.' + ext)
    myDLL.initpyMath()
    import pyMath as Math

    ## Segmentation modules
    #
    myDll=ctypes.PyDLL('lib_simvascular_segmentation.' + ext)
    myDll.initpyContour()
    myDll.initpyThresholdContour()
    myDll.initpylevelSetContour()
    myDll.initpyPolygonContour()
    myDll.initpyCircleContour()
    myDll.initpySplinePolygonContour()
    #import pyContour as Contour
    import pyThresholdContour as ThresholdContour
    import pylevelSetContour as LevelSetContour
    import pyCircleContour as CircleContour
    import pyPolygonContour as PolygonContour
    import pySplinePolygonContour as SplinePolygonContour
    try:
        myDll=ctypes.PyDLL('lib_simvascular_vmtk_utils.' + ext)
        myDll.initpyVMTKUtils()
        import pyVMTKUtils as VMTKUtils
    except:
        print("VMTK is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_opencascade_solid.' + ext)
        myDll.initpySolidOCCT()
        import pySolidOCCT as SolidOCCT
    except:
        print("OpenCASCADE is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_mmg_mesh.' + ext)
        myDll.initpyMeshUtil()
        import pyMeshUtil as MeshUtil
    except:
        print("MMG is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_itk_lset.' + ext)
        myDll.initpyItkls()
        import pyItkls as Itkls
    except:
        print("ITK is not available!")
    myDll=ctypes.PyDLL('lib_simvascular_adaptor.' + ext)
    myDll.initpyMeshAdapt()
    import pyMeshAdapt as MeshAdapt
    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_adaptor.' + ext)
        myDll.initpyTetGenAdapt()
        import pyTetGenAdapt as TetGenAdapt
    except:
        print("TetGen adaptor is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_adaptor.' + ext)
        myDll.initpyMeshSimAdapt()
        import pyMeshSimAdapt as MeshSimAdapt
    except Exception as e:
        pass 
    try:
        myDll=ctypes.PyDLL('lib_simvascular_geom.' + ext)
        myDll.initpyGeom()
        import pyGeom as Geom
    except:
        print("Geometry functions are not available!")
    myDll=ctypes.PyDLL('lib_simvascular_image.' + ext)
    myDll.initpyImage()
    import pyImage as Image
    myDll=ctypes.PyDLL('lib_simvascular_path.' + ext)
    myDll.initpyPath()
    import pyPath as Path
    try:
      myDll=ctypes.PyDLL('liborg_sv_pythondatanodes.' + ext)
      myDll.initpyGUI()
      import pyGUI as GUI
    except:
      try:
        myDll=ctypes.PyDLL('org_sv_pythondatanodes.' + ext)
        myDll.initpyGUI()
        import pyGUI as GUI
      except:
        print("org_sv_pythondatanodes was not found!")
else:
    myDll=ctypes.PyDLL('lib_simvascular_solid.' + ext)
    func=myDll.PyInit_pySolid
    func.restype = ctypes.py_object
    Solid = func()
    myDll=ctypes.PyDLL('lib_simvascular_polydata_solid.' + ext)
    func=myDll.PyInit_pySolidPolydata
    func.restype = ctypes.py_object
    SolidPolyData=func()
    try:
        myDll=ctypes.PyDLL('lib_simvascular_parasolid_solid.' + ext)
        func=myDll.PyInit_pySolidParasolid
        func.restype = ctypes.py_object
        SolidParaSolid = func()
    except Exception as e:
        pass 
    myDll=ctypes.PyDLL('lib_simvascular_repository.' + ext)
    func=myDll.PyInit_pyRepository
    func.restype = ctypes.py_object
    Repository=func()
    myDll=ctypes.PyDLL('lib_simvascular_mesh.' + ext)
    func=myDll.PyInit_pyMeshObject
    func.restype = ctypes.py_object
    MeshObject=func()
    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_mesh.' + ext)
        func=myDll.PyInit_pyMeshTetgen
        func.restype = ctypes.py_object
        MeshTetgen=func()
    except:
        print("TetGen is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_mesh.' + ext)
        func=myDll.PyInit_pyMeshSim
        func.restype = ctypes.py_object
        MeshSim=func()
    except Exception as e:
        pass 
    myDLL=ctypes.PyDLL('lib_simvascular_utils.' + ext)
    func=myDLL.PyInit_pyMath
    func.restype = ctypes.py_object
    Math=func()

    ## Segmentation modules.
    #
    myDll=ctypes.PyDLL('lib_simvascular_segmentation.' + ext)
    func=myDll.PyInit_pyContour
    func.restype = ctypes.py_object
    contour=func()

    func=myDll.PyInit_pyThresholdContour
    func.restype = ctypes.py_object
    ThresholdContour=func()
    func=myDll.PyInit_pylevelSetContour
    func.restype = ctypes.py_object
    LevelSetContour=func()
    func=myDll.PyInit_pyPolygonContour
    func.restype = ctypes.py_object
    PolygonContour=func()
    func=myDll.PyInit_pyCircleContour
    func.restype = ctypes.py_object
    CircleContour=func()
    func=myDll.PyInit_pySplinePolygonContour
    func.restype = ctypes.py_object
    SplinePolygonContour=func()
    try:
        myDll=ctypes.PyDLL('lib_simvascular_vmtk_utils.' + ext)
        func=myDll.PyInit_pyVMTKUtils
        func.restype = ctypes.py_object
        VMTKUtils=func()
    except:
        print("VMTK is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_opencascade_solid.' + ext)
        func=myDll.PyInit_pySolidOCCT
        func.restype = ctypes.py_object
        SolidOCCT=func()
    except:
        print("OpenCASCADE is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_mmg_mesh.' + ext)
        func=myDll.PyInit_pyMeshUtil
        func.restype = ctypes.py_object
        MeshUtil=func()
    except:
        print("MMG is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_itk_lset.' + ext)
        func=myDll.PyInit_pyItkls
        func.restype = ctypes.py_object
        Itkls=func()
    except:
        print("ITK is not available!")
    myDll=ctypes.PyDLL('lib_simvascular_adaptor.' + ext)
    func=myDll.PyInit_pyMeshAdapt
    func.restype = ctypes.py_object
    MeshAdapt=func()
    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_adaptor.' + ext)
        func=myDll.PyInit_pyTetGenAdapt
        func.restype = ctypes.py_object
        TetGenAdapt=func()
    except:
        print("TetGen adaptor is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_adaptor.' + ext)
        func=myDll.PyInit_pyMeshSimAdapt
        func.restype = ctypes.py_object
        MeshSimAdapt=func()
    except Exception as e:
        pass 
    try:
        myDll=ctypes.PyDLL('lib_simvascular_geom.' + ext)
        func=myDll.PyInit_pyGeom
        func.restype = ctypes.py_object
        Geom=func()
    except:
        print("Geom functions are not available!")
    myDll=ctypes.PyDLL('lib_simvascular_image.' + ext)
    func=myDll.PyInit_pyImage
    func.restype = ctypes.py_object
    Image=func()
    myDll=ctypes.PyDLL('lib_simvascular_path.' + ext)
    func=myDll.PyInit_pyPath
    func.restype = ctypes.py_object
    Path=func()
    try:
      myDll=ctypes.PyDLL('liborg_sv_pythondatanodes.' + ext)
      func=myDll.PyInit_pyGUI
      func.restype = ctypes.py_object
      GUI=func()
    except:
      try:
        myDll=ctypes.PyDLL('org_sv_pythondatanodes.' + ext)
        func=myDll.PyInit_pyGUI
        func.restype = ctypes.py_object
        GUI=func()
      except:
        print("org_sv_pythondatanodes was not found!")
        


    


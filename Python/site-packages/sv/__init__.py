# Copyright (c) Stanford University, The Regents of the University of
#               California, and others.
#
# All Rights Reserved.
#
# See Copyright-SimVascular.txt for additional details.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import os
#import math
import ctypes
import sys

if sys.platform == "darwin":
    ext = "dylib"
elif sys.platform == "linux2":
    ext = "so"
elif sys.platform == "win32" or sys.platform =="cygwin":
    ext = "dll"
else:
    raise ValueError("System unrecognized")

def load_module(library_name, *args):
    """
    Load a module from a library and one or more module names.

    Args:
      *args: Module names.
    """
    try:
        modules = []
        module_library = ctypes.PyDLL(library_name + "." + ext)
        for module_name in args:
            module = getattr(module_library, 'PyInit_' + module_name)
            module.restype = ctypes.py_object
            modules.append( module() )
        if len(modules) == 1:
            return modules[0]
        else:
            return tuple(modules)
    except:
        print("Library '%s' not loaded." % library_name) 
        return None 

#----------------------------------------------------------
#                   Python 3.0
#----------------------------------------------------------

if sys.version_info >= (3,0):

    #------------
    # dmg module
    #------------
    try:
        dmg = load_module('liborg_sv_pythondatanodes', 'pyDmg')
    except:
        try:
            dmg = load_module('liborg_sv_pythondatanodes', 'pyDmg')
        except:
            pass 

    #------------------------
    # Solid modeling modules 
    #------------------------
    solid = load_module('lib_simvascular_solid', 'pySolid')
    SolidPolyData = load_module('lib_simvascular_polydata_solid', 'pySolidPolydata')
    try:
        SolidParaSolid = load_module('lib_simvascular_parasolid_solid', 'pySolidParasolid')
    except:
        pass
    try:
        SolidOCCT = load_module('lib_simvascular_opencascade_solid', 'pySolidOCCT')
    except:
        pass

    #-------------
    # Geom module
    #-------------
    try:
        geometry = load_module('lib_simvascular_geom', 'pyGeom')
    except:
        pass 

    #-----------------
    # Meshing modules 
    #-----------------
    mesh = load_module('lib_simvascular_mesh', 'pyMeshObject')
    try:
        MeshTetgen = load_module('lib_simvascular_tetgen_mesh', 'pyMeshTetgen')
    except:
        pass
    try:
        MeshSim = load_module('lib_simvascular_meshsim_mesh', 'pyMeshSim')
    except:
        pass
    try:
        mesh_util = load_module('lib_simvascular_mmg_mesh', 'pyMeshUtil')
    except:
        pass

    # Adaptive meshing modules. 
    mesh_adapt = load_module('lib_simvascular_adaptor', 'pyMeshAdapt')
    try:
        TetGenAdapt = load_module('lib_simvascular_tetgen_adaptor', 'pyTetGenAdapt')
    except:
        pass 
    try:
        MeshSimAdapt = load_module('lib_simvascular_meshsim_adaptor', 'pyMeshSimAdapt')
    except Exception as e:
        pass 

    #-------------
    # Path module
    #-------------
    path = load_module('lib_simvascular_path', 'pyPath')

    #----------------------
    # Segmentation modules
    #----------------------
    # Load several modules at a time.
    #
    seg_lib = 'lib_simvascular_segmentation'
    contour,CircleContour,LevelSetContour = load_module(seg_lib, 'pyContour', 'pyCircleContour', 'pylevelSetContour') 
    PolygonContour,SplinePolygonContour = load_module(seg_lib, 'pyPolygonContour', 'pySplinePolygonContour') 
    ThresholdContour = load_module(seg_lib, 'pyThresholdContour') 

    #-------------------
    # VMTK utils module
    #-------------------
    try:
        VMTKUtils = load_module('lib_simvascular_vmtk_utils', 'pyVMTKUtils')
    except:
        print("VMTK is not available!")

    #------------
    # ITK module
    #------------
    try:
        Itkls = load_module('lib_simvascular_itk_lset', 'pyItkls') 
    except:
        pass 

    #----------------
    # Imaging module
    #----------------
    Image = load_module('lib_simvascular_image', 'pyImage')

    #-------------------
    # Math utils module
    #-------------------
    math_utils = load_module('lib_simvascular_utils', 'pyMath') 

    #-------------------
    # Repository module
    #-------------------
    repository = load_module('lib_simvascular_repository', 'pyRepository')

#----------------------------------------------------------
#                   Python 2.0
#----------------------------------------------------------

else:
    myDll=ctypes.PyDLL('lib_simvascular_solid.' + ext)
    myDll.initpySolid()
    import pySolid as Solid
    myDll=ctypes.PyDLL('lib_simvascular_polydata_solid.' + ext)
    myDll.initpySolidPolydata()
    import pySolidPolydata as SolidPolyData
    try:
        myDll=ctypes.PyDLL('lib_simvascular_parasolid_solid.' + ext)
        myDll.initpySolidParasolid()
        import pySolidParasolid as SolidParaSolid
    except:
        pass 
    myDll=ctypes.PyDLL('lib_simvascular_repository.' + ext)
    myDll.initpyRepository()
    import pyRepository as Repository

    ## Mesh modules.
    myDll = ctypes.PyDLL('lib_simvascular_mesh.' + ext)
    myDll.initpyMeshObject()
    #import pyMeshObject as MeshObject

    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_mesh.' + ext)
        myDll.initpyMeshTetgen()
        import pyMeshTetgen as MeshTetGen
    except:
        print("TetGen is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_mesh.' + ext)
        myDll.initpyMeshSim()
        import pyMeshSim as MeshSim
    except Exception as e:
        pass 
    myDLL=ctypes.PyDLL('lib_simvascular_utils.' + ext)
    myDLL.initpyMath()
    import pyMath as Math

    ## Segmentation modules
    #
    myDll=ctypes.PyDLL('lib_simvascular_segmentation.' + ext)
    myDll.initpyContour()
    myDll.initpyThresholdContour()
    myDll.initpylevelSetContour()
    myDll.initpyPolygonContour()
    myDll.initpyCircleContour()
    myDll.initpySplinePolygonContour()
    #import pyContour as Contour
    import pyThresholdContour as ThresholdContour
    import pylevelSetContour as LevelSetContour
    import pyCircleContour as CircleContour
    import pyPolygonContour as PolygonContour
    import pySplinePolygonContour as SplinePolygonContour
    try:
        myDll=ctypes.PyDLL('lib_simvascular_vmtk_utils.' + ext)
        myDll.initpyVMTKUtils()
        import pyVMTKUtils as VMTKUtils
    except:
        print("VMTK is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_opencascade_solid.' + ext)
        myDll.initpySolidOCCT()
        import pySolidOCCT as SolidOCCT
    except:
        print("OpenCASCADE is not available!")

    try:
        myDll=ctypes.PyDLL('lib_simvascular_mmg_mesh.' + ext)
        myDll.initpyMeshUtil()
        #import pyMeshUtil as MeshUtil
    except:
        print("MMG is not available!")

    try:
        myDll=ctypes.PyDLL('lib_simvascular_itk_lset.' + ext)
        myDll.initpyItkls()
        import pyItkls as Itkls
    except:
        print("ITK is not available!")
    myDll=ctypes.PyDLL('lib_simvascular_adaptor.' + ext)
    myDll.initpyMeshAdapt()
    import pyMeshAdapt as MeshAdapt
    try:
        myDll=ctypes.PyDLL('lib_simvascular_tetgen_adaptor.' + ext)
        myDll.initpyTetGenAdapt()
        import pyTetGenAdapt as TetGenAdapt
    except:
        print("TetGen adaptor is not available!")
    try:
        myDll=ctypes.PyDLL('lib_simvascular_meshsim_adaptor.' + ext)
        myDll.initpyMeshSimAdapt()
        import pyMeshSimAdapt as MeshSimAdapt
    except Exception as e:
        pass 
    try:
        myDll=ctypes.PyDLL('lib_simvascular_geom.' + ext)
        myDll.initpyGeom()
        import pyGeom as Geom
    except:
        print("Geometry functions are not available!")
    myDll=ctypes.PyDLL('lib_simvascular_image.' + ext)
    myDll.initpyImage()
    import pyImage as Image
    myDll=ctypes.PyDLL('lib_simvascular_path.' + ext)
    myDll.initpyPath()
    #import pyPath as Path
    try:
      myDll=ctypes.PyDLL('liborg_sv_pythondatanodes.' + ext)
      myDll.initpyGUI()
      import pyGUI as GUI
    except:
      try:
        myDll=ctypes.PyDLL('org_sv_pythondatanodes.' + ext)
        myDll.initpyGUI()
        import pyGUI as GUI
      except:
        print("org_sv_pythondatanodes was not found!")


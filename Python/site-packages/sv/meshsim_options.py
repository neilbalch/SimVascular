
'''
This script defines classes used to set options for the MeshSim mesh generator.

**** This is experimental for now. ****

'''

from collections import MutableSequence

class MeshSimListOption(MutableSequence):
    def __init__(self, element_type):
        self.element_type = element_type
        self.inner_list = []

    def __len__(self):
        return len(self.inner_list)

    def __delitem__(self, index):
        self.inner_list.__delitem__(index - 1)

    def insert(self, index, value):
        self.inner_list.insert(index - 1, value)

    def __setitem__(self, index, value):
        self.inner_list.__setitem__(index - 1, value)

    def __getitem__(self, index):
        return self.inner_list.__getitem__(index - 1)

    def append(self, value):
        print("[MeshSimListOption] Append '{0:s}'".format(str(value)))
        if not self.check_value(value):
            return
        self.inner_list.append(value)

    def check_value(self, value):
        if self.element_type.keys() != value.keys():
            print("[MeshSimListOption] **** ERROR: invalid type {0:s}".format(str(value)))
            return False
        for key in self.element_type.keys():
            if (type(value[key]) != type(self.element_type[key])):
                print("[MeshSimListOption] **** ERROR: '{0:s}' has invalid type {1:s}".format(key, str(type(value[key]))))
                return False
        return True


class MeshSimOptions(object):

    def __init__(self):
        self.global_curvature = {}
        self.global_edge_size = {}
        #self.local_curvature = MeshSimListOption()
        #self.local_edge_size = MeshSimListOption(MeshSimDoubleBool('edge_size', 'absolute'))
        self.local_edge_size = MeshSimListOption({'face_id':1, 'edge_size':1.0, 'absolute':True})
        self.surface_mesh_flag = True;
        self.volume_mesh_flag = True;



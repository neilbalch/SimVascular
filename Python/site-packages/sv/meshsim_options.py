# Copyright (c) Stanford University, The Regents of the University of
#               California, and others.
#
# All Rights Reserved.
#
# See Copyright-SimVascular.txt for additional details.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

'''
The classes defined here are used to set options for the MeshSim mesh generator.
'''
from collections import MutableSequence

class MeshSimOptionTemplate(object):
    GLOBAL_CURVATURE = {'curvature':float, 'absolute':bool} 
    GLOBAL_EDGE_SIZE = {'edge_size':float, 'absolute':bool} 
    LOCAL_CURVATURE = {'face_id':int, 'curvature':float, 'absolute':bool} 
    LOCAL_EDGE_SIZE = {'face_id':int, 'edge_size':float, 'absolute':bool} 

class MeshSimListOption(MutableSequence):
    ''' 
    This class is used to store a list of dicts.

    The format of the dict elements are set using a template. Elements must match the template
    in order to be added to the list.

    The dicts are typically used to store data for local meshing. For example, 
    the local curvature parameter for a face has the format

        {'face_id':1, 'curvature':1.0, 'absolute':True }

    '''
    def __init__(self, name, template):
        self.name = name 
        self.template = template
        self.dlist = []

    def __len__(self):
        return len(self.dlist)

    def __delitem__(self, index):
        self.dlist.__delitem__(index - 1)

    def insert(self, index, value):
        self.dlist.insert(index - 1, value)

    def __setitem__(self, index, value):
        self.dlist.__setitem__(index - 1, value)

    def __getitem__(self, index):
        return self.dlist.__getitem__(index - 1)

    def __str__(self):
        return '[ ' + ', '.join(map(str, self.dlist)) + ' ]'

    def append(self, value):
        print("----- append -----")
        if not self.check_value(value):
            return
        print("[MeshSimListOption] Append value {0:s}".format(str(value)))
        self.dlist.append(value)

    def check_value(self, value):
        if self.template.keys() != value.keys():
            return False
        for k,v in self.template.items():
            if type(value[k]) != v:
                return False
        return True

    def set_value(self, value):
        print("----- set value -----")
        type_name = type(value).__name__
        if type_name != 'list':
            raise ValueError('{0:s} must be a {1:s}'.format(self.name,str(self.template)))
        print("[MeshSimListOption] Set {0:d} values.".format(len(value)))
        for item in value:
            if not self.check_value(item):
                raise ValueError('{0:s} must be {1:s}'.format(self.name, str(self.template)))
            print("[MeshSimListOption] Set value {0:s}".format(str(value)))
            self.dlist.append(item)
        return True

class pMeshSimOptions(object):
    '''
    The MeshSimOptions class is used to store options parameters for the MeshSim mesh generator.
    '''
    def __init__(self, global_edge_size=None, surface_mesh_flag=True, volume_mesh_flag=True):
        self._global_curvature = {}
        self._global_edge_size = global_edge_size

        self._local_edge_size = MeshSimListOption("local_edge_size", MeshSimOptionTemplate.LOCAL_EDGE_SIZE)
        self.local_curvature = MeshSimListOption("local_curvature", MeshSimOptionTemplate.LOCAL_CURVATURE)

        self.surface_mesh_flag = surface_mesh_flag
        self.volume_mesh_flag = volume_mesh_flag

    def check_value(self, template, value):
        if template.keys() != value.keys():
            return False
        for k,v in template.items():
            if type(value[k]) != v:
                return False
        return True

    @property
    def global_curvature(self):
        return self._global_curvature

    @global_curvature.setter
    def global_curvature(self, value):
        if (not self.check_value(MeshSimOptionTemplate.GLOBAL_CURVATURE, value)):
            return 
        self._global_curvature = value

    @property
    def global_edge_size(self):
        return self._global_edge_size

    @global_edge_size.setter
    def global_edge_size(self, value):
        if (not self.check_value(MeshSimOptionTemplate.GLOBAL_EDGE_SIZE, value)):
            raise ValueError('global_edge_size must be a ' + str(MeshSimOptionTemplate.GLOBAL_EDGE_SIZE))
        self._global_edge_size = value

    @property
    def local_edge_size(self):
        return self._local_edge_size

    @local_edge_size.setter
    def local_edge_size(self, value):
        #if (not self.check_value(MeshSimOptionTemplate.GLOBAL_EDGE_SIZE, value)):
        #    raise ValueError('global_edge_size must be a ' + str(MeshSimOptionTemplate.GLOBAL_EDGE_SIZE))
        print("######## local_edge_size.setter")
        self._local_edge_size.set_value(value)
        #self._local_edge_size = value

    @property
    def surface_mesh_flag(self):
        return self._surface_mesh_flag

    @surface_mesh_flag.setter
    def surface_mesh_flag(self, value):
        if type(value).__name__ != "bool":
            raise ValueError('surface_mesh_flag must be a bool.')
        self._surface_mesh_flag = value

    '''
    def __setattr__(self, name, value): 
        type_ok = False
        type_name = type(value).__name__
        print("[MeshSimOptions] Set attribute '{0:s}' to {1:s}".format(name, str(value)))
        print("[MeshSimOptions]     type '{0:s}' ".format(type_name))
        if name == 'list_options':
            type_ok = True
        elif name in self.list_options:
            if type_name == 'MeshSimListOption':
                self.__dict__[name] = value
                type_ok = True
            elif self.__dict__[name].set_value(value):
                type_ok = True
      
        if not type_ok:
            raise Exception("Can't set attribute '{0:s}' to a {1:s}.".format(name, type_name))

        self.__dict__[name] = value
    '''

    def print(self):
        print("global_curvature: " + str(self._global_curvature))
        print("global_edge_size: " + str(self._global_edge_size))
        print("local_edge_size: " + str(self.local_edge_size))
        print("surface_mesh_flag: " + str(self._surface_mesh_flag))


